---
- hosts: localhost
  gather_facts: false

  pre_tasks:
    - name: set the required vars
      set_fact:
        eu0_ingest_token: "{{ lookup('env','ACCESS_TOKEN') }}"
        eu0_rum_token: "i{{ lookup('env','RUM_TOKEN') }}"
        eu0_realm: "{{ lookup('env','REALM') }}"
        o11y_env_name: "{{ lookup('env','INSTANCE') }}"
        o11y_diabversion: "demo-in-a-box-2.0"

  tasks:
    - name: check to see if the config has run
      stat:
        path: /white_rabbit.followed
      register: wh_result

    - name: wait for dpkg to be unlocked
      become: yes
      shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;
      when: not wh_result.stat.exists

    - name: download demo-in-a-box bits
      get_url:
        url: "https://demoinabox-tst.s3.us-east-2.amazonaws.com/{{ o11y_diabversion }}.zip"
        dest: /home/ubuntu/demo-in-a-box.zip
      become: yes
      when: not wh_result.stat.exists

    - name: extract demo-in-a-box into /home/ubuntu/
      unarchive:
        src: demo-in-a-box.zip
        dest: /home/ubuntu/
        owner: ubuntu
        group: ubuntu
        remote_src: yes
        list_files: yes
      become: yes
      register: diab_dir_name
      when: not wh_result.stat.exists

    - debug:
        var: diab_dir_name.files[0]
      when: not wh_result.stat.exists

    - name: delete the servicefile for demoinabox.service
      file:
        state: absent
        path: /etc/systemd/system/demoinabox.service
      become: yes
      when: not wh_result.stat.exists

    - name: create servicefile for demoinabox.service
      file:
        path: /etc/systemd/system/demoinabox.service
        state: touch
      become: yes
      when: not wh_result.stat.exists

    - name: update servicefile for demoinabox.service
      ansible.builtin.blockinfile:
        path: /etc/systemd/system/demoinabox.service
        block: |
          [Unit]
          Description=demoinabox service
          After=network.target
          StartLimitIntervalSec=0
          [Service]
          Type=simple
          Restart=always
          RestartSec=1
          User=ubuntu
          Environment="KUBECONFIG=/home/ubuntu/.kube/config"
          WorkingDirectory=/home/ubuntu/{{ diab_dir_name.files[0] }}democonsole
          ExecStart=/usr/bin/flask run -p 8081 --host=0.0.0.0
          [Install]
          WantedBy=multi-user.target
        marker: "## {mark} added by ansible (configuration demo-in-a-box)"
      become: yes
      when: not wh_result.stat.exists

    - name: install democonsole dependencies
      command: python3 -m pip install -r requirements.txt
      args:
        chdir: "/home/ubuntu/{{ diab_dir_name.files[0] }}democonsole/"
      when: not wh_result.stat.exists

    - name: install democonsole dependencies
      command: helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart
      when: not wh_result.stat.exists

    - name: helm repo update
      command: helm repo update
      when: not wh_result.stat.exists

    - name: start the demoinabox service
      command: systemctl enable --now demoinabox.service
      become: yes
      when: not wh_result.stat.exists

    - name: chill out for 30 seconds to let the diab service start
      pause:
        seconds: 30
      when: not wh_result.stat.exists

    - name: request config save with required vars - eu0
      uri:
        url: "http://localhost:8081/saveConfig"
        method: POST
        body: "realm={{ eu0_realm }}&accessToken={{ eu0_ingest_token }}&rumAccessToken={{ eu0_rum_token }}&environment={{ o11y_env_name }}&loadgenLocation=aws"
        status_code: [ 200, 201 ]
        timeout: 30
      when: not wh_result.stat.exists

    - name: run the inital config
      uri:
        url: "http://localhost:8081/startCollector"
        method: GET
        status_code: [ 200, 201 ]
        timeout: 30
      when: not wh_result.stat.exists

    - name: chill out for 120 seconds to let the OTEL collector start
      pause:
        seconds: 120
      when: not wh_result.stat.exists

    - name: start the frontend demo
      uri:
        url: "http://localhost:8081/startdemo?demo=frontend"
        method: GET
        status_code: [ 200, 201 ]
        timeout: 30
      when: not wh_result.stat.exists

    - name: chill out and let the frontend demo start
      pause:
        seconds: 90
      when: not wh_result.stat.exists

    - name: wait for the hipster shop to become available
      uri:
        url: "http://localhost:81"
        method: GET
        validate_certs: no
        status_code: 200
        return_content: no
      register: splunk_ui
      until: splunk_ui.status == 200
      retries: 30
      delay: 5

    - name: create a file to signify that the config has run successfully
      file:
        path: "/white_rabbit.followed"
        state: touch
      become: yes
      when: not wh_result.stat.exists