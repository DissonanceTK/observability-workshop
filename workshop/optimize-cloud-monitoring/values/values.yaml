agent:
  extraEnvs:
  - name: WORKSHOP_ENVIRONMENT
    valueFrom:
      secretKeyRef:
        name: workshop-secret
        key: env
  - name: REALM
    valueFrom:
      secretKeyRef:
        name: workshop-secret
        key: realm
  config:
    receivers:
      receiver_creator:
        receivers:
          smartagent/redis:
            rule: type == "pod" && name matches "redis"
            config:
              type: collectd/redis
              endpoint: '`endpoint`:6379'
              extraDimensions:
                service.name: otel-demo-redis-${WORKSHOP_ENVIRONMENT}
          smartagent/kafka:
            rule: type == "pod" && name matches "kafka"
            config:
              type: collectd/kafka
              endpoint: '`endpoint`:5555'
              clusterName: otel-demo-kafka
              extraDimensions:
                service.name: otel-demo-kafka-${WORKSHOP_ENVIRONMENT}
          postgresql:
            rule: type == "pod" && name matches "ffspostgres"
            config:
              endpoint: '`endpoint`:5432'
              username: ffs
              password: ffs
              databases: [ffs]
              tls:
                insecure: true
    processors:
      attributes/postgres:
        include:
          match_type: strict
          services:
            - featureflagservice
        actions:
          - key: db.type
            value: postgres
            action: upsert
      attributes/postgres-servicename:
        include:
          match_type: strict
          services:
            - postgres:ffs
        actions:
          - key: service.name
            value: otel-demo-postgresql-${WORKSHOP_ENVIRONMENT}
            action: upsert
      resource/add_store_location:
        attributes:
          - action: insert
            value: "Detroit"
            key:   store.location
    exporters:
      otlphttp:
        traces_endpoint: "https://ingest.${REALM}.signalfx.com/v2/trace/otlp"
        metrics_endpoint: "https://ingest.${REALM}.signalfx.com/v2/datapoint/otlp"
        compression: gzip
        headers:
          "X-SF-Token": "${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}"
      logging:
        loglevel: info
    connectors:
      spanmetrics:
    service:
      pipelines:
        logs:
          exporters: [splunk_hec/o11y, splunk_hec/platform_logs]
          processors: [memory_limiter, k8sattributes, filter/logs, batch, resourcedetection, resource, resource/logs, resource/add_environment, resource/add_store_location]
          receivers: [filelog, fluentforward, otlp]
        metrics:
          exporters: [signalfx]
          processors: [memory_limiter, batch, resourcedetection, resource, attributes/postgres-servicename, resource/add_store_location]
          receivers: [hostmetrics, kubeletstats, otlp, receiver_creator, signalfx, spanmetrics]
        traces:
          exporters: [otlphttp, spanmetrics]
          processors: [memory_limiter, batch, k8sattributes, resourcedetection, resource, resource/add_environment, attributes/postgres, attributes/postgres-servicename, resource/add_store_location]
          receivers: [otlp]
clusterReceiver:
  config:
    processors:
      resource/add_store_location:
        attributes:
          - action: insert
            value: "Detroit"
            key:   store.location
    receivers:
      kafkametrics:
        brokers: kafka:9092
        collection_interval: 10s
        protocol_version: 2.0.0
        scrapers:
        - brokers
        - topics
        - consumers
    service:
      pipelines:
        logs/events:
          exporters: [signalfx]
          processors: [memory_limiter, batch, resourcedetection, resource, resource/add_event_k8s, resource/add_store_location]
          receivers: [smartagent/kubernetes-events]
        metrics:
          exporters: [signalfx]
          processors: [memory_limiter, batch, resource, resource/k8s_cluster, resource/add_store_location]
          receivers: [k8s_cluster, kafkametrics]
        metrics/collector:
          exporters: [signalfx]
          processors: [memory_limiter, batch, resource/add_collector_k8s, resourcedetection, resource, resource/add_store_location]
          receivers: [prometheus/k8s_cluster_receiver]
  k8sEventsEnabled: true