#cloud-config
system_info:
  default_user:
    name: splunk
    groups: [docker]
    lock_passwd: false

ssh_pwauth: yes
%{ if pub_key != "" ~}
ssh_authorized_keys:
  - ${pub_key}
%{ endif ~}

password: ${instance_password}

chpasswd:
  expire: false

groups:
  - docker

hostname: ${instance_name}

package_update: true

packages:
  - ansible
  - docker
  - docker-compose
  - gnupg2
  - jq
  - lynx
  - maven
  - net-tools
  - openjdk-17-jdk
  - python3-flask
  - python3-pip
  - python3-venv
  - shellinabox
  - unzip
  - zsh

write_files:
  - path: /etc/ssh/sshd_config
    content: |
      Port 2222
      Protocol 2
      HostKey /etc/ssh/ssh_host_rsa_key
      HostKey /etc/ssh/ssh_host_dsa_key
      HostKey /etc/ssh/ssh_host_ecdsa_key
      HostKey /etc/ssh/ssh_host_ed25519_key
      UsePrivilegeSeparation yes
      KeyRegenerationInterval 3600
      ServerKeyBits 1024
      SyslogFacility AUTH
      LogLevel INFO
      LoginGraceTime 120
      PermitRootLogin no
      StrictModes yes
      RSAAuthentication yes
      PubkeyAuthentication yes
      IgnoreRhosts yes
      RhostsRSAAuthentication no
      HostbasedAuthentication no
      PermitEmptyPasswords no
      ChallengeResponseAuthentication no
      X11Forwarding yes
      X11DisplayOffset 10
      PrintMotd no
      PrintLastLog yes
      TCPKeepAlive yes
      AcceptEnv LANG LC_*
      Subsystem sftp /usr/lib/openssh/sftp-server
      UsePAM yes
      AllowUsers splunk

  - path: /etc/skel/.profile
    append: true
    content: |

      export REALM=${realm}
      export ACCESS_TOKEN=${access_token}
      export API_TOKEN=${api_token}
      export RUM_TOKEN=${rum_token}
      export HEC_TOKEN=${hec_token}
      export HEC_URL=${hec_url}

      echo "Waiting for cloud-init status..."
      if ! /usr/bin/timeout 180 grep -q 'Cloud-init .*finished at' <(sudo tail -f /var/log/cloud-init-output.log); then
        echo "Instance setup did not complete after 3 minutes. Please try again.";
      else
        echo "Your instance is ready!";
      fi

      INSTANCE=$(cat /etc/hostname)
      CLUSTER_NAME="$INSTANCE-cluster"

      export INSTANCE CLUSTER_NAME

      export KUBECONFIG=/home/splunk/.kube/config
      alias kc='kubectl'
      alias dc='docker-compose'

  - path: /tmp/workshop-secret.yaml
    permissions: '0755'
    content: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: workshop-secret
        namespace: default
      type: Opaque
      stringData:
        app: ${instance_name}-store
        env: ${instance_name}-workshop
        deployment: "deployment.environment=${instance_name}-workshop"
        access_token: ${access_token}
        api_token: ${api_token}
        realm: ${realm}
        rum_token: ${rum_token}
        hec_token: ${hec_token}
        hec_url: ${hec_url}

  - path: /tmp/diab-setup.sh
    permissions: '0755'
    content: |
      export RUM_TOKEN=${rum_token}
      export REALM=${realm}
      export ACCESS_TOKEN=${access_token}
      export HEC_TOKEN=${hec_token}
      export HEC_URL=${hec_url}
      export INSTANCE="${instance_name}"
      ansible-playbook /home/splunk/playbook.yml

  - path: /tmp/pre-setup.sh
    permissions: '0755'
    content: |
      export RUM_TOKEN=${rum_token}
      export REALM=${realm}
      export ACCESS_TOKEN=${access_token}
      export API_TOKEN=${api_token}
      export HEC_TOKEN=${hec_token}
      export HEC_URL=${hec_url}
      export INSTANCE="${instance_name}"
      if [ ! -f /home/splunk/.helmok ]; then
        helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart
        helm repo update
        helm install splunk-otel-collector \
        --set="splunkObservability.realm=${realm}" \
        --set="splunkObservability.accessToken=${access_token}" \
        --set="clusterName=${instance_name}-k3s-cluster" \
        --set="splunkObservability.logsEnabled=false" \
        --set="logsEngine=otel" \
        --set="splunkObservability.profilingEnabled=true" \
        --set="splunkObservability.infrastructureMonitoringEventsEnabled=true" \
        --set="environment=${instance_name}-workshop" \
        --set="splunkPlatform.endpoint=${hec_url}" \
        --set="splunkPlatform.token=${hec_token}" \
        --set="splunkPlatform.index=splunk4rookies-workshop" \
        splunk-otel-collector-chart/splunk-otel-collector \
        -f /home/splunk/workshop/k3s/otel-collector.yaml

        # use IDMSv2
        TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
        RUM_FRONTEND_IP=$(curl -sSH "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)
        export RUM_FRONTEND_IP

        cd /home/splunk/workshop/apm/
        sudo kubectl apply -f deployment.yaml
        echo ${instance_name} > /home/splunk/.helmok
      fi

  - path: /tmp/otel-demo-setup.sh
    permissions: '0755'
    content: |
      export RUM_TOKEN=${rum_token}
      export REALM=${realm}
      export ACCESS_TOKEN=${access_token}
      export API_TOKEN=${api_token}
      export HEC_TOKEN=${hec_token}
      export HEC_URL=${hec_url}
      export INSTANCE="${instance_name}"
      if [ ! -f /home/splunk/.helmok ]; then
        helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart
        helm repo update
        envsubst '$REALM' < /home/splunk/workshop/oteldemo/otel-demo-collector.yaml | helm install splunk-otel-collector \
        --set="splunkObservability.realm=${realm}" \
        --set="splunkObservability.accessToken=${access_token}" \
        --set="clusterName=${instance_name}-k3s-cluster" \
        --set="splunkObservability.logsEnabled=true" \
        --set="logsEngine=otel" \
        --set="splunkObservability.profilingEnabled=true" \
        --set="splunkObservability.infrastructureMonitoringEventsEnabled=true" \
        --set="environment=${instance_name}-workshop" \
        --set="splunkPlatform.endpoint=${hec_url}" \
        --set="splunkPlatform.token=${hec_token}" \
        --set="splunkPlatform.index=splunk4rookies-workshop" \
        splunk-otel-collector-chart/splunk-otel-collector -f -
        helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
        helm install opentelemetry-demo open-telemetry/opentelemetry-demo --values /home/splunk/workshop/oteldemo/otel-demo.yaml
        echo ${instance_name} > /home/splunk/.helmok
      fi

runcmd:
  - chsh -s $(which zsh) splunk
  - su splunk -c 'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"'
  - echo "source /etc/skel/.profile" >> /home/splunk/.zshrc
  # Install Helm
  - curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  # Install K9s (Kubernetes UI)
  - curl -S -OL https://github.com/derailed/k9s/releases/download/v0.27.0/k9s_Linux_amd64.tar.gz
  - tar xfz k9s_Linux_amd64.tar.gz -C /usr/local/bin/ k9s
  # Download Workshop
  - export WSVERSION=${wsversion}
  - 'export WSARCHIVE=$([ "$WSVERSION" = "main" ] && echo "main" || echo "v$WSVERSION")'
  - curl -s -OL https://github.com/splunk/observability-workshop/archive/$WSARCHIVE.zip
  - unzip -qq $WSARCHIVE.zip -d /home/splunk/
  - mkdir /home/splunk/workshop
  - mv /home/splunk/observability-workshop-$WSVERSION/workshop/* /home/splunk/workshop
  - mv /home/splunk/workshop/ansible/playbook.yml /home/splunk
  - rm -rf /home/splunk/observability-workshop-$WSVERSION
  - rm -rf /home/splunk/workshop/aws /home/splunk/workshop/cloud-init /home/splunk/workshop/ansible
  - mv /home/splunk/workshop/k3s/demo-in-a-box.zip /home/splunk
  # Download Splunk Observability Content Contrib Repo
  - curl -s -L https://github.com/splunk/observability-content-contrib/archive/main.zip -o content-contrib.zip
  - unzip -qq content-contrib.zip -d /home/splunk/
  - mv /home/splunk/observability-content-contrib-main /home/splunk/observability-content-contrib
  # Configure motd
  - curl -s https://raw.githubusercontent.com/splunk/observability-workshop/main/workshop/cloud-init/motd -o /etc/motd
  - chmod -x /etc/update-motd.d/*
  # Install Terraform
  - curl -S -OL https://releases.hashicorp.com/terraform/1.3.7/terraform_1.3.7_linux_amd64.zip
  - unzip -qq terraform_1.3.7_linux_amd64.zip -d /usr/local/bin
  - bash /usr/local/bin/setup-docker-registry.sh
  # Install K3s
  - curl -sfL https://get.k3s.io | sh -
  # Create kube config and set correct permissions on splunk user home directory
  - mkdir /home/splunk/.kube && kubectl config view --raw > /home/splunk/.kube/config
  - chmod 400 /home/splunk/.kube/config
  - chown -R splunk:splunk /home/splunk
  # Deploy private registry
  - /usr/local/bin/kubectl apply -f /home/splunk/workshop/k3s/registry/registry.yaml
  - /usr/local/bin/kubectl apply -f /tmp/workshop-secret.yaml
  # Configure shellinabox port and disable ssl then restart
  - sed -i 's/SHELLINABOX_PORT=4200/SHELLINABOX_PORT=6501/' /etc/default/shellinabox
  - sed -i "s/\"--no-beep\"/\"--no-beep --disable-ssl\"/" /etc/default/shellinabox
  - sudo service shellinabox restart
  - sed -i 's/_THEME=\"robbyrussell\"/_THEME=\"gentoo\"/g' home/splunk/.zshrc
  # Make sure the locl path is correctly setup as k8s can only support full paths in the volume mounts

%{ if diab == true ~}
  - su splunk -c 'bash /tmp/diab-setup.sh'
%{ endif ~}
%{ if presetup == true ~}
  - su splunk -c 'bash /tmp/pre-setup.sh'
  - su splunk -c 'bash /tmp/create-browser-test.sh'
%{ endif ~}
%{ if otel_demo == true ~}
  - su splunk -c 'bash /tmp/otel-demo-setup.sh'
%{ endif ~}